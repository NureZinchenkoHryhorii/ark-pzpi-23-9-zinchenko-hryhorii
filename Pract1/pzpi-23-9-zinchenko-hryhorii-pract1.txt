Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Звіт
до практичного завдання №1
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду у Pascal за рекомендаціями Free Pascal та Lazarus»







Виконав:
ст. гр. ПЗПІ-23-9
Зінченко Григорій Євгенійович
	                     Перевірив:
                     ст. викладач кафедри ПІ
                     Сокорчук Ігор Петрович	





Харків 2025
1 ІСТОРІЯ ЗМІН
№	Дата	Версія звіту	Опис змін та виправлень
1	29.10.2025	0.1	Початкова версія документу, заповнення всіх розділів


























2 ЗАВДАННЯ
Студент повинен обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.

























3 ОПИС ВИКОНАНОЇ РОБОТИ
3.1 Вступ    
Мова програмування Pascal є однією з класичних мов, яка відіграла важливу роль у розвитку сучасної програмної інженерії. Вона була створена Ніклаусом Віртом у 1970-х роках з метою навчання студентів структурованому програмуванню та формування дисципліни мислення при розробці програмного забезпечення. Pascal відрізняється чіткою та зрозумілою структурою коду, наявністю строгого типізування та логічного розділення програмних блоків, що робить її ефективним інструментом для навчання основам програмування.
Сучасна реалізація Free Pascal зберегла класичний синтаксис Turbo Pascal, але додала підтримку об’єктно-орієнтованого підходу (Object Pascal) та сучасних стандартів програмування. Це дозволяє використовувати мову як для освітніх цілей, так і для створення практичних застосунків, зокрема у середовищі розробки Delphi.
Аналіз і рефакторинг коду є важливими етапами у процесі розробки програмного забезпечення. Вони спрямовані на підвищення зрозумілості, читабельності та підтримуваності коду. Рефакторинг дозволяє усувати дублювання, спрощувати складні алгоритми, стандартизувати іменування та забезпечує дотримання принципів чистого коду. В результаті поліпшується ефективність командної роботи та зменшується ймовірність помилок у майбутніх модифікаціях програм. Метою даної роботи є вивчення основних принципів написання чистого та підтримуваного коду на Pascal, аналіз типових помилок та формування практичних рекомендацій щодо покращення якості програмних продуктів.
3.2 Рекомендація 1. Мінімізуйте дублювання коду (принцип DRY)
Опис: Повторювані фрагменти коду слід винести в окремі процедури або функції. Це зменшує ймовірність помилок та полегшує оновлення логіки.
Приклад:
1	// Поганий приклад
2	WriteLn('Hello, Anna');
3	WriteLn('Hello, Bob');
4	
5	// Гарний приклад
6	procedure Greet(name: String);
7	begin
8	WriteLn('Hello, ', name);
9	end;
10	
11	Greet('Anna');
12	Greet('Bob');

3.3 Рекомендація 2. Уникайте “магічних чисел” — використовуйте іменовані константи
Опис: Якщо у коді з’являється число без пояснення, його варто замінити на константу з описовою назвою. Це покращує зрозумілість і дозволяє змінювати значення в одному місці.
Приклад:
1	// Поганий приклад
2	if age > 18 then  
3	WriteLn('Adult');
4	
5	// Гарний приклад
6	const MIN_ADULT_AGE = 18;
7	
8	if age > MIN_ADULT_AGE then  
9	WriteLn('Adult');
3.4 Рекомендація 3. Використовуйте масиви та записи для структурованих данних
Опис: Pascal дозволяє створювати записи (record) для структурованих об’єктів, що підвищує організацію даних.
Приклад:
1	// Поганий приклад
2	var name: string; age: integer;
3	
4	// Гарний приклад
5	type Student = record
6	Name: string;
7	Age: integer;
8	end;
9	var s: Student;
Полегшує роботу з комплексними даними та робить код більш наочним.
3.5 Рекомендація 4. Використовуйте generics для типобезпечних контейнерів
Опис: це сучасний механізм у Free Pascal, який дозволяє створювати колекції, списки та інші структури даних, що можуть працювати з будь-яким типом, але при цьому залишаються типобезпечними. Це означає, що компілятор контролює, які саме дані можна додавати до колекції, і не дозволяє випадково вставити неправильний тип.
Приклад:
1	// Поганий приклад
2	uses Classes, Generics.Collections;
3	
4	var
5	listOld: TList;
6	listNew: TList<string>;
7	begin
8	listOld := TList.Create;
9	listOld.Add(Pointer('Hello'));       
10	writeln(string(listOld[0]));         
11	listOld.Free;
12	
13	// Гарний приклад
14	listNew := TList<string>.Create;
15	listNew.Add('Hello');
16	listNew.Add('World');
17	writeln(listNew[0], ' ', listNew[1]); 
18	listNew.Free;
19	end. 
3.6 Рекомендація 5. Уникайте unit-циклів і залежностей між модулями
Опис: У гіді DesignGuidelines для Lazarus / Free Pascal радять уникати циклічних залежностей між модулями (units), оскільки це збільшує складність збірки та ускладнює архітектуру.
Приклад:
1	// Поганий приклад
2	unit A;
3	interface
4	uses B;
5	...
6	
7	unit B;
8	interface
9	uses A;
10	...
11	
12	// Гарний приклад
13	unit A;
14	interface
15	uses B;
16	...
17	
18	unit B;
19	interface
20	// не використовує A
21	...
3.7 Рекомендація 6. Використовуйте CamelCase для класів і PascalCase для процедур
Опис: Повторювані фрагменти коду слід винести в окремі процедури або функції. Це зменшує ймовірність помилок та полегшує оновлення логіки.
Приклад:
1	// Поганий приклад
2	type myclass = class
3	end;
4	
5	procedure do_something;
6	begin
7	end;
8	
9	// Гарний приклад
10	type TMyClass = class
11	end;
12	
13	procedure DoSomething;
14	begin
15	end;
3.8 Рекомендація 7. Використовуйте типи замість «варіантів»
Опис: Замість універсальних типів (Variant) краще визначати власні типи даних або записи. Це робить програму більш стабільною і безпечною типово.
Приклад:
1	// Поганий приклад
2	var data: Variant;
3	data := 'Hello';
4	data := 123; // важко відстежити тип

5	// Гарний приклад
6	type
7	TPerson = record
8	Name: string;
9	Age: integer;
10	end;
11	
12	var person: TPerson;
13	person.Name := 'Anna';
14	person.Age := 25;
3.9 Рекомендація 8. Обмежуйте доступ до внутрішніх даних (інкапсуляція)
Опис: Інкапсуляція - це один із найважливіших принципів об’єктно-орієнтованого програмування. Вона полягає в тому, щоб приховати внутрішню реалізацію класу від зовнішнього світу й дозволити доступ до даних лише через спеціально визначений інтерфейс.
Приклад:
1	// Поганий приклад
2	type TUser = class
3	name: string;
4	end;
5	
6	// Гарний приклад
7	type TUser = class
8	private
9	FName: string;
10	public
11	property Name: string read FName write FName;
12	end;
3.10 Рекомендація 9. Пишіть ключові слова Pascal у нижньому регістрі (lowercase)
Опис: За стилем Free Pascal wiki, ключові слова (begin, end, if, then і т.д.) мають використовуватись у нижньому регістрі, а не в усіх великих чи змішаному.
Приклад:
1	// Поганий приклад
2	BEGIN
3	IF x > 0 THEN
4	WriteLn('Positive');
5	END;
6	
7	// Гарний приклад
8	begin
9	if x > 0 then
10	writeln('Positive');
11	end;
3.11 Рекомендація 10. Використовуйте exceptions для помилок, а не коди повернення
Опис: Замість повернення «-1» чи «false» для помилки краще піднімати винятки (raise). Це робить обробку помилок централізованою і чистою.
Приклад:
1	// Поганий приклад
2	if not SaveFile then
3	writeln('Помилка збереження');
4	
5	// Гарний приклад
6	try
7	SaveFile;
8	except
9	on E: EFileError do
10	writeln('Помилка: ', E.Message);
11	end;

















4 ВИСНОВКИ
У результаті виконання практичного заняття було здійснено систематичний аналіз принципів написання чистого, структурованого та підтримуваного коду мовою Pascal. Розглянуті десять практичних рекомендацій демонструють основні напрямки вдосконалення програмного стилю та архітектури, що мають безпосередній вплив на якість програмних продуктів. У роботі приділено увагу як базовим аспектам (скорочення дублювання коду, використання констант, структурованих типів), так і більш просунутим практикам, зокрема застосуванню generics, інкапсуляції, контролю залежностей між модулями та стандартизації стилю іменування. Проведений аналіз показав, що дотримання принципів чистого коду сприяє не лише підвищенню читабельності та надійності програм, а й формує культуру програмування, засновану на чіткості, логічності та передбачуваності рішень. Використання таких підходів допомагає уникнути типових помилок, зменшити складність супроводу проєктів, забезпечити стабільність роботи та полегшити колективну розробку. Мова Pascal, незважаючи на свій класичний характер, продовжує залишатися актуальною завдяки своїй структурованості, строгій типізації та підтримці сучасних можливостей, таких як об’єктно-орієнтоване програмування та generics. Free Pascal і середовище Lazarus відкривають можливості не лише для навчання, а й для створення реальних застосунків, де можна на практиці реалізовувати принципи якісного програмування.







5 ВИКОРИСТАНІ ДЖЕРЕЛА
1	Жовнір, О. В. Основи програмування мовою Pascal. Львів: Видавництво ЛНУ, 2015.
2	Ковальчук, І. С. Об’єктно-орієнтоване програмування у середовищі Free Pascal і Lazarus. Київ, 2019.
3	Free Pascal Documentation. Free Pascal Wiki. https://www.freepascal.org/docs.html
4	Lazarus Project Documentation. Lazarus IDE. https://www.lazarus-ide.org/


















ДОДАТОК А
Посилання до відеозапису: https://www.youtube.com/watch?v=wK-EpLo1K7E
Таймкоди відеозапису:
00:00 - Початок
00:52 - Вступ
01:25 - Мінімізуйте дублювання коду
02:15 - Уникайте “магічних чисел”  
02:55 - Використовуйте масиви та записи для структурованих данних
03:33 - Використовуйте generics для типобезпечних контейнерів
04:20 - Уникайте unit-циклів і залежностей між модулями
04:51 - Використовуйте CamelCase для класів і PascalCase для процедур
05:26 - Використовуйте типи замість «варіантів»
05:55 - Обмежуйте доступ до внутрішніх даних (інкапсуляція)
06:25 - Пишіть ключові слова Pascal у нижньому регістрі 
06:50 - Використовуйте exceptions для помилок
07:29 - Висновки








ДОДАТОК Б
 
Рисунок Б.1 — Титульна сторінка
 
Рисунок Б.2 — Вступ
 
Рисунок Б.3 — Мінімізуйте дублювання коду (принцип DRY)
 
Рисунок Б.4 — Уникайте “магічних чисел” — використовуйте іменовані константи
 
Рисунок Б.5 — Використовуйте масиви та записи для структурованих данних
 
Рисунок Б.6 — Використовуйте generics для типобезпечних контейнерів
 
Рисунок Б.7 — Уникайте unit-циклів і залежностей між модулями
 
Рисунок Б.8 — Використовуйте CamelCase для класів і PascalCase для процедур
 
Рисунок Б.9 — Використовуйте типи замість «варіантів»
 
Рисунок Б.10 — Обмежуйте доступ до внутрішніх даних (інкапсуляція)
 
Рисунок Б.11 — Пишіть ключові слова Pascal у нижньому регістрі (lowercase)
 
Рисунок Б.12 — Використовуйте exceptions для помилок, а не коди повернення
 
Рисунок Б.13 — Висновок
















ДОДАТОК В
Програмний код
GitHub репозиторій: https://github.com/NureZinchenkoHryhorii/ark-pzpi-23-9-zinchenko-hryhorii/blob/main/Pract1/pzpi-23-9-zinchenko-hryhorii-pract1/code-examples-code-conventions.pas

